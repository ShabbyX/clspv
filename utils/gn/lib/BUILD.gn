import("//build_overrides/llvm.gni")
import("//build_overrides/spirv_tools.gni")

# Args controlling these targets
# Empty for now
declare_args() {
  # spirv namespace
  spirv_namespace_strings = "spv"
  spirv_namespace_glsl = "glsl"
  spirv_namespace_reflection = "reflection"

  # bake file variable names
  clspv_bake_file_data_variable_name = "clspv_builtins_header_data"
  clspv_bake_file_size_variable_name = "clspv_builtins_header_size"
  clspv_bake_file_data_base_variable_name = "opencl_base_builtins_header_data"
  clspv_bake_file_size_base_variable_name = "opencl_base_builtins_header_size"

  # clspv builtin library variable names
  clspv_library_data_var_name = "clspv_builtin_library_data"
  clspv_library_size_var_name = "clspv_builtin_library_size"
  clspv64_library_data_var_name = "clspv64_builtin_library_data"
  clspv64_library_size_var_name = "clspv64_builtin_library_size"
}

# a common config that will be used by all the clspv targets
config("clspv_common_config") {  # __has_feature(cxx_range_for) -- how do we
                                 # check this?
  configs = [
    "//${llvm_build_root}build:llvm_code",
    "//${llvm_build_root}build:clang_code",
  ]

  include_dirs = [
    "//include",
    "//third_party/SPIRV-Headers/include",
  ]
}

# TODO move this to toplevel build file
action("clspv_c_strings") {
  script = "//cmake/spirv_c_strings.py"

  output = "$target_gen_dir/clspv/spirv_c_strings.hpp"
  input = "${spirv_tools_spirv_headers_dir}/include/spirv/unified1/spirv.hpp"

  args = [
    "--input-file=" + rebase_path(input, root_build_dir),
    "--output-file=" + rebase_path(output, root_build_dir),
    "--namespace=" + spirv_namespace_strings,
  ]

  outputs = [ output ]
}

action("clspv_glsl") {
  script = "//cmake/spirv_ext_inst.py"

  inputs = [ "${spirv_tools_spirv_headers_dir}/include/spirv/unified1/extinst.glsl.std.450.grammar.json" ]

  outputs = [ "$target_gen_dir/clspv/spirv_glsl.hpp" ]

  args = [
    "--input-file=" + rebase_path(inputs[0], root_build_dir),
    "--output-file=" + rebase_path(outputs[0], root_build_dir),
    "--namespace=" + spirv_namespace_glsl,
  ]
}

action("clspv_reflection") {
  script = "//cmake/spirv_ext_inst.py"

  inputs = [ "${spirv_tools_spirv_headers_dir}/include/spirv/unified1/extinst.nonsemantic.clspvreflection.grammar.json" ]

  outputs = [ "$target_gen_dir/clspv/spirv_reflection.hpp" ]

  args = [
    "--input-file=" + rebase_path(inputs[0], root_build_dir),
    "--output-file=" + rebase_path(outputs[0], root_build_dir),
    "--namespace=" + spirv_namespace_reflection,
  ]
}

action("clspv-builtins") {
  script = "//cmake/define_clspv_builtins.py"

  outputs = [ "$target_gen_dir/clspv-builtins.h" ]

  args = [ "--output-file=" + rebase_path(outputs[0], root_build_dir) ]
}

# TODO Need a way to generate *.bc files
action("clspv_builtin_library") {
  script = "//cmake/bake_file.py"
  inputs = [ "//cmake/clspv--.bc" ]
  outputs = [ "$target_gen_dir/clspv/clspv_builtin_library.h" ]

  args = [
    "--input-header-file=" + rebase_path(inputs[0], root_build_dir),
    "--output-file=" + rebase_path(outputs[0], root_build_dir),
    "--header-var=" + clspv_library_data_var_name,
    "--header-size=" + clspv_library_size_var_name,
  ]
}

action("clspv64_builtin_library") {
  script = "//cmake/bake_file.py"
  inputs = [ "//cmake/clspv64--.bc" ]
  outputs = [ "$target_gen_dir/clspv/clspv64_builtin_library.h" ]

  args = [
    "--input-header-file=" + rebase_path(inputs[0], root_build_dir),
    "--output-file=" + rebase_path(outputs[0], root_build_dir),
    "--header-var=" + clspv64_library_data_var_name,
    "--header-size=" + clspv64_library_size_var_name,
  ]
}

action("clspv_baked_opencl_header") {
  script = "//cmake/bake_file.py"  # cannot use data_deps as that's a rutime dep
  deps = [ "//lib:clspv-builtins" ]

  inputs = [
    "$target_gen_dir/clspv-builtins.h",
    "//${llvm_root}clang/lib/Headers/opencl-c-base.h",
  ]

  outputs = [ "$target_gen_dir/clspv/opencl_builtins_header.h" ]

  args = [
    "--input-header-file=" + rebase_path(inputs[0], root_build_dir),
    "--input-base-file=" + rebase_path(inputs[1], root_build_dir),
    "--output-file=" + rebase_path(outputs[0], root_build_dir),
    "--header-var=" + clspv_bake_file_data_variable_name,
    "--header-size-var=" + clspv_bake_file_size_variable_name,
    "--base-var=" + clspv_bake_file_data_base_variable_name,
    "--base-size-var=" + clspv_bake_file_size_base_variable_name,
  ]
}

clspv_core_sources = [
  "Compiler.cpp",
  "FrontendPlugin.cpp",
  "Sampler.cpp",
]

source_set("clspv_passes") {
  sources = [
    "AddFunctionAttributesPass.cpp",
    "AllocateDescriptorsPass.cpp",
    "AnnotationToMetadataPass.cpp",
    "ArgKind.cpp",
    "AutoPodArgsPass.cpp",
    "BitcastUtils.cpp",
    "Builtins.cpp",
    "CallGraphOrderedFunctions.cpp",
    "ClusterConstants.cpp",
    "ClusterPodKernelArgumentsPass.cpp",
    "ComputeStructuredOrder.cpp",
    "ConstantEmitter.cpp",
    "Constants.cpp",
    "DeclarePushConstantsPass.cpp",
    "DefineOpenCLWorkItemBuiltinsPass.cpp",
    "DescriptorCounter.cpp",
    "DirectResourceAccessPass.cpp",
    "FeatureMacro.cpp",
    "FixupBuiltinsPass.cpp",
    "FixupStructuredCFGPass.cpp",
    "FunctionInternalizerPass.cpp",
    "HideConstantLoadsPass.cpp",
    "InlineEntryPointsPass.cpp",
    "InlineFuncWithImageMetadataGetterPass.cpp",
    "InlineFuncWithPointerBitCastArgPass.cpp",
    "InlineFuncWithPointerToFunctionArgPass.cpp",
    "InlineFuncWithSingleCallSitePass.cpp",
    "KernelArgNamesToMetadataPass.cpp",
    "Layout.cpp",
    "LogicalPointerToIntPass.cpp",
    "LongVectorLoweringPass.cpp",
    "LowerAddrSpaceCastPass.cpp",
    "LowerPrivatePointerPHIPass.cpp",
    "MultiVersionUBOFunctionsPass.cpp",
    "NativeMathPass.cpp",
    "NormalizeGlobalVariable.cpp",
    "OpenCLInlinerPass.cpp",
    "Option.cpp",
    "Passes.cpp",
    "PhysicalPointerArgsPass.cpp",
    "PrintfPass.cpp",
    "PushConstant.cpp",
    "RemoveUnusedArguments.cpp",
    "ReorderBasicBlocksPass.cpp",
    "ReplaceLLVMIntrinsicsPass.cpp",
    "ReplaceOpenCLBuiltinPass.cpp",
    "ReplacePointerBitcastPass.cpp",
    "RewriteInsertsPass.cpp",
    "RewritePackedStructs.cpp",
    "SPIRVOp.cpp",
    "SPIRVProducerPass.cpp",
    "ScalarizePass.cpp",
    "SetImageChannelMetadataPass.cpp",
    "ShareModuleScopeVariables.cpp",
    "SignedCompareFixupPass.cpp",
    "SimplifyPointerBitcastPass.cpp",
    "SpecConstant.cpp",
    "SpecializeImageTypes.cpp",
    "SplatArgPass.cpp",
    "SplatSelectCondition.cpp",
    "StripFreezePass.cpp",
    "ThreeElementVectorLoweringPass.cpp",
    "Types.cpp",
    "UBOTypeTransformPass.cpp",
    "UndoBoolPass.cpp",
    "UndoByvalPass.cpp",
    "UndoGetElementPtrConstantExprPass.cpp",
    "UndoInstCombinePass.cpp",
    "UndoSRetPass.cpp",
    "UndoTranslateSamplerFoldPass.cpp",
    "UndoTruncateToOddIntegerPass.cpp",
    "ZeroInitializeAllocasPass.cpp",
  ]

  configs += [ ":clspv_common_config" ]

  deps = [
    ":clspv_c_strings",
    ":clspv_glsl",
    ":clspv_reflection",
  ]

  include_dirs = [ "$target_gen_dir" ]

  # LLVM targets
  deps += [
    "//${llvm_root}llvm/lib/Analysis",
    "//${llvm_root}llvm/lib/CodeGen",
    "//${llvm_root}llvm/lib/IR",  # LLVMCore
    "//${llvm_root}llvm/lib/Passes",
    "//${llvm_root}llvm/lib/Support",
    "//${llvm_root}llvm/lib/Transforms/AggressiveInstCombine",
    "//${llvm_root}llvm/lib/Transforms/IPO",
    "//${llvm_root}llvm/lib/Transforms/InstCombine",
    "//${llvm_root}llvm/lib/Transforms/Instrumentation",
    "//${llvm_root}llvm/lib/Transforms/ObjCARC",
    "//${llvm_root}llvm/lib/Transforms/Scalar",
    "//${llvm_root}llvm/lib/Transforms/Utils",
    "//${llvm_root}llvm/lib/Transforms/Vectorize",
  ]
}

static_library("clspv_core") {
  sources = clspv_core_sources

  configs += [ ":clspv_common_config" ]

  deps = [
    "//${llvm_root}clang/lib/AST",
    "//${llvm_root}clang/lib/Basic",
    "//${llvm_root}clang/lib/CodeGen",
    "//${llvm_root}clang/lib/Frontend",
    "//${llvm_root}clang/lib/Serialization",

    # llvm/clang
    "//${llvm_root}llvm/lib/IRReader",
    "//${llvm_root}llvm/lib/Linker",
    "//lib:clspv64_builtin_library",
    "//lib:clspv_baked_opencl_header",
    "//lib:clspv_builtin_library",
    "//lib:clspv_passes",
  ]

  include_dirs = [ "$target_gen_dir" ]
}
