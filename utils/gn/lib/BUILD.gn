import("//build_overrides/clspv.gni")
import("//build_overrides/llvm.gni")
import("//build_overrides/spirv_tools.gni")

# Args controlling these targets
# Empty for now

# a common config that will be used by all the clspv targets
config("clspv_common_config") {  # __has_feature(cxx_range_for) -- how do we
                                 # check this?
  include_dirs = [
    "../include",
    "${spirv_tools_spirv_headers_dir}/include",
  ]
}

clspv_core_sources = [
  "Compiler.cpp",
  "FrontendPlugin.cpp",
  "Sampler.cpp",
]

source_set("clspv_passes") {
  sources = [
    "AddFunctionAttributesPass.cpp",
    "AllocateDescriptorsPass.cpp",
    "AnnotationToMetadataPass.cpp",
    "ArgKind.cpp",
    "AutoPodArgsPass.cpp",
    "BitcastUtils.cpp",
    "Builtins.cpp",
    "CallGraphOrderedFunctions.cpp",
    "ClusterConstants.cpp",
    "ClusterPodKernelArgumentsPass.cpp",
    "ComputeStructuredOrder.cpp",
    "ConstantEmitter.cpp",
    "Constants.cpp",
    "DeclarePushConstantsPass.cpp",
    "DefineOpenCLWorkItemBuiltinsPass.cpp",
    "DescriptorCounter.cpp",
    "DirectResourceAccessPass.cpp",
    "FeatureMacro.cpp",
    "FixupBuiltinsPass.cpp",
    "FixupStructuredCFGPass.cpp",
    "FunctionInternalizerPass.cpp",
    "HideConstantLoadsPass.cpp",
    "InlineEntryPointsPass.cpp",
    "InlineFuncWithImageMetadataGetterPass.cpp",
    "InlineFuncWithPointerBitCastArgPass.cpp",
    "InlineFuncWithPointerToFunctionArgPass.cpp",
    "InlineFuncWithSingleCallSitePass.cpp",
    "KernelArgNamesToMetadataPass.cpp",
    "Layout.cpp",
    "LogicalPointerToIntPass.cpp",
    "LongVectorLoweringPass.cpp",
    "LowerAddrSpaceCastPass.cpp",
    "LowerPrivatePointerPHIPass.cpp",
    "MultiVersionUBOFunctionsPass.cpp",
    "NativeMathPass.cpp",
    "NormalizeGlobalVariable.cpp",
    "OpenCLInlinerPass.cpp",
    "Option.cpp",
    "Passes.cpp",
    "PhysicalPointerArgsPass.cpp",
    "PrintfPass.cpp",
    "PushConstant.cpp",
    "RemoveUnusedArguments.cpp",
    "ReorderBasicBlocksPass.cpp",
    "ReplaceLLVMIntrinsicsPass.cpp",
    "ReplaceOpenCLBuiltinPass.cpp",
    "ReplacePointerBitcastPass.cpp",
    "RewriteInsertsPass.cpp",
    "RewritePackedStructs.cpp",
    "SPIRVOp.cpp",
    "SPIRVProducerPass.cpp",
    "ScalarizePass.cpp",
    "SetImageChannelMetadataPass.cpp",
    "ShareModuleScopeVariables.cpp",
    "SignedCompareFixupPass.cpp",
    "SimplifyPointerBitcastPass.cpp",
    "SpecConstant.cpp",
    "SpecializeImageTypes.cpp",
    "SplatArgPass.cpp",
    "SplatSelectCondition.cpp",
    "StripFreezePass.cpp",
    "ThreeElementVectorLoweringPass.cpp",
    "Types.cpp",
    "UBOTypeTransformPass.cpp",
    "UndoBoolPass.cpp",
    "UndoByvalPass.cpp",
    "UndoGetElementPtrConstantExprPass.cpp",
    "UndoInstCombinePass.cpp",
    "UndoSRetPass.cpp",
    "UndoTranslateSamplerFoldPass.cpp",
    "UndoTruncateToOddIntegerPass.cpp",
    "ZeroInitializeAllocasPass.cpp",
  ]

  configs += [ ":clspv_common_config" ]
  configs += clspv_configs_overrides_append
  configs -= clspv_configs_overrides_remove

  deps = [
    "../:clspv_c_strings",
    "../:clspv_glsl",
    "../:clspv_reflection",
  ]
  public_configs = [
    "//${llvm_build_root}/build:llvm_code",
    "//${llvm_build_root}/build:clang_code",
  ]

  # need generated includes from the action scripts
  include_dirs = [ "$target_gen_dir/../" ]

  # LLVM targets
  deps += [
    "//${llvm_build_root}/secondary/llvm/lib/Analysis",
    "//${llvm_build_root}/secondary/llvm/lib/CodeGen",
    "//${llvm_build_root}/secondary/llvm/lib/IR",  # LLVMCore
    "//${llvm_build_root}/secondary/llvm/lib/Passes",
    "//${llvm_build_root}/secondary/llvm/lib/Support",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/AggressiveInstCombine",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/IPO",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/InstCombine",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/Instrumentation",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/ObjCARC",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/Scalar",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/Utils",
    "//${llvm_build_root}/secondary/llvm/lib/Transforms/Vectorize",
  ]
}

static_library("clspv_core") {
  sources = clspv_core_sources

  configs += [ ":clspv_common_config" ]
  configs += clspv_configs_overrides_append
  configs -= clspv_configs_overrides_remove

  deps = [
    "//${llvm_build_root}/secondary/clang/lib/AST",
    "//${llvm_build_root}/secondary/clang/lib/Basic",
    "//${llvm_build_root}/secondary/clang/lib/CodeGen",
    "//${llvm_build_root}/secondary/clang/lib/Frontend",
    "//${llvm_build_root}/secondary/clang/lib/Serialization",

    # llvm/clang
    ":clspv_passes",
    "../:clspv64_builtin_library",
    "../:clspv_baked_opencl_header",
    "../:clspv_builtin_library",
    "//${llvm_build_root}/secondary/llvm/lib/IRReader",
    "//${llvm_build_root}/secondary/llvm/lib/Linker",
  ]

  # need generated includes from action targets
  include_dirs = [ "$target_gen_dir/../" ]
}
